name: ci

on:
  push:
    branches: [ "" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "" ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "用于手动触发测试"
        required: true
        default: "true"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set Env
        run: |
          echo "BUILD_TIME=$(date --rfc-3339=seconds --utc)" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo '')" >> $GITHUB_ENV

      # Step 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: 设置 Go 环境
      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          check-latest: true
          cache: true

      # Step 3: 安装xgo以及upx
      # https://github.com/techknowlogick/xgo
      - name: Install xgo and upx
        run: |
          go install src.techknowlogick.com/xgo@latest
          #sudo apt-get update
          #sudo apt-get install upx  

      # Step 4: 编译项目
      - name: Cross-Compile using xgo
        run: |
          mkdir -p output
          #xgo --targets=darwin-10.14/*,windows-6.1/*,linux/amd64,linux/arm64,linux/mips64,linux/mips64le,linux/ppc64le,linux/riscv64 \
          xgo --targets=darwin-10.14/*
          -out output/ncmctl ./cmd/ncmctl/main.go
          ls ./output

      # Step 5: 压缩文件
      - name: Compress and upload binaries
        run: |
          cp LICENSE output/LICENSE
          
          for file in output/*; do
            filename=$(basename "$file")
            ext="${filename##*.}"
          
            if [[ "$filename" == "LICENSE" ]]; then
              continue
            fi

            if [[ "$ext" == "exe" ]]; then
              new_name="ncmctl.exe"
            else
              new_name="ncmctl"
            fi

            mv "$file" "output/$new_name"
          
            ## 使用 UPX 压缩文件
            #if [[ -x "output/$new_name" ]]; then
            #  upx --best "output/$new_name"
            #  file "output/$new_name"
            #else
            #  echo "Skipping UPX for non-executable file: $new_name"
            #  continue
            #fi
          
            sha256_file="output/checksum.sha256"
            # 去掉路径，仅保留文件名
            sha256sum "output/$new_name" | sed "s|output/||" > "$sha256_file"
            echo "SHA256 for $filename: $(cat "$sha256_file")"
          
            tarball="output/${filename}.tar.gz"
            tar -czf "$tarball" output/"$new_name" output/checksum.sha256 output/LICENSE
          
            rm -f "output/$new_name" "output/checksum.sha256"
          done

      # Step 6: 上传压缩包
      # https://github.com/actions/upload-artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: ./output
          if-no-files-found: error

      # Step 7: 下载压缩包
      # https://github.com/actions/download-artifact
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts*
          path: ./output
          merge-multiple: true

      # Step 8: 输出当前ref和生成的文件列表
      - name: Debug Release
        run: |
          echo "Current ref: ${{ github.ref }}"
          echo "Generated artifacts:"
          ls ./output

      - name: Generate changelog
        id: changelog
        uses: jaywcjlove/changelog-generator@main
        if: ${{ env.PREVIOUS_TAG }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filter-author: (jaywcjlove|小弟调调™|dependabot|renovate\\[bot\\]|dependabot\\[bot\\]|Renovate Bot)
          filter: '[R|r]elease[d]\s+[v|V]\d(\.\d+){0,2}'
          template: |
            ## Bugs
            {{fix}}
            ## Feature
            {{feat}}
            ## Improve
            {{refactor,perf,clean}}
            ## Misc 
            {{chore,style,ci||🔶 Nothing change}}
            ## Unknown
            {{__unknown__}}

      # Step 9: 发布
      # https://github.com/softprops/action-gh-release
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./output/*
          generate_release_notes: true
          fail_on_unmatched_files: true
          prerelease: false
          draft: false
          make_latest: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Debug Release
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./output/*
          body: |
            ${{ steps.changelog.outputs.compareurl }}

            ${{ steps.changelog.outputs.changelog }}
            
            Document Website: https://raw.githack.com/chaunsin/netease-cloud-music/${{ steps.changelog.outputs.gh-pages-short-hash }}/index.html
          generate_release_notes: true
          prerelease: true
          fail_on_unmatched_files: true
          draft: true
          token: ${{ secrets.GITHUB_TOKEN }}